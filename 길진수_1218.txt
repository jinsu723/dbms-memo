1. 학생 정보와 성적을 관리하기 위해 다음과 같은 정보를 저장해야한다
- 학생번호, 이름, 나이, 전화번호, 주소
- 과목명, 강사명, 수업일자, 수업시간, 학생성적, 수업번호, 과목번호

1) 개념적 설계
	학생		과목		성적
	==========================================
	학생번호		과목번호		수업번호
	이름		과목명		학생성적
	나이		강사명
	전화번호		개강일
	주소		수업시간

2) 논리적 설계
	학생
	=====================
	학생번호(PK)	정수
	이름	N/N	문자열
	나이	N/N	정수
	전화번호(UK)N/N	문자열
	주소	N/N	문자열

	과목
	=====================
	과목번호(PK)	문자열
	과목명	N/N	문자열
	강사명	N/N	문자열
	개강일	N/N	날짜
	수업시간(CK)N/N	문자열

	성적
	=====================
	수업번호(PK)	문자열
	학생성적 N/N	문자열
	학생번호(FK)N/N	정수
	과목번호(FK)N/N	문자열

3) 물리적 설계
	TBL_STU
	======================================
	STU_NUMBER(PK)		NUMBER
	STU_NAME(NN)		VARCAHR2(1000)
	STU_AGE(NN)		NUMBER
	STU_PHONE(UK/NN)	VARCHAR2(1000)
	STU_ADDRESS(N/N)	VARCHAR2(1000)

	TBL_MAJOR
	======================================
	MAJOR_MNUMBER(PK)	VARCHAR2(1000)
	MAJOR_NAME(NN)		VARCHAR2(1000)
	MAJOR_TEACHER(NN)	VARCHAR2(1000)
	MAJOR_START(NN)		DATE
	MAJOR_TIME(CK/NN)	VARCHAR2(1000)

	TBL_SCORE
	======================================
	SCORE_SNUMBER(PK)	VARCHAR2(1000)
	SCORE_GRADE(NN)		CHAR(1)
	STU_NUMBER(FK)		NUMBER
	MAJOR_MNUMBER(FK)	VARCHAR2(1000

CREATE TABLE TBL_STUDENT1(
   STUDENT_NUMBER   NUMBER
  , STUDENT_NAME   VARCHAR2(1000)      CONSTRAINT STUDENT_NAME_NN NOT NULL
  , STUDENT_AGE      NUMBER         CONSTRAINT STUDENT_AGE_NN NOT NULL
  , STUDENT_PHONE   VARCHAR2(1000)   CONSTRAINT STUDENT_PHONE_NN NOT NULL
  , STUDNET_ADDRESS   VARCHAR2(1000)   CONSTRAINT STUDENT_ADDRESS_NN NOT NULL
  , CONSTRAINT STUDENT_NUMBER_PK PRIMARY KEY(STUDENT_NUMBER)
  , CONSTRAINT STUDENT_PHONE_UK  UNIQUE(STUDENT_PHONE)
);

SELECT    *
FROM   tbl_student1;

INSERT INTO tbl_student1
--VALUES(1, '길진수', 27, '010-1111-1111', '경기도');
--values(2, '길길길', 90, '010-2222-2222', '서울');
--VALUES(3, '진진진', 10, '010-3333-3333', '화성');
--VALUES(4, '수수수', 25, '010-4444-4444', '미국');
VALUES(5, '세뮤얼', 1, '010-5555-5555', '베트남');

CREATE TABLE TBL_MAJOR(
   MAJOR_MNUMBER   VARCHAR2(1000)
  , MAJOR_NAME      VARCHAR2(1000)   CONSTRAINT MAJOR_NAME_NN NOT NULL
  , MAJOR_THECHER   VARCHAR2(1000)      CONSTRAINT MAJOR_TEACHER_NN NOT NULL
  , MAJOR_START      DATE         CONSTRAINT MAJOR_START_NN NOT NULL
  , MAJOR_TIME      VARCHAR2(1000)   CONSTRAINT MAJOR_TIME_NN NOT NULL CHECK(MAJOR_TIME = '오전 9시'
                                                         OR MAJOR_TIME = '오후 19시')
  , CONSTRAINT MAJOR_MNUMBER_PK PRIMARY KEY(MAJOR_MNUMBER)
);

SELECT    *
FROM   tbl_major;

INSERT INTO tbl_major
--VALUES(1, 'java', '참새', '2024-11-21', '오전 9시');
--VALUES(2, 'dbms', '정규쌤', '2024-11-21', '오전 9시');
--VALUES(3, 'web', '신짱구', '2023-11-21', '오후 19시');
--VALUES(4, 'java', '신짱구', '2023-11-30', '오후 19시');
VALUES(5, 'web', '참새', '2030-4-30', '오전 9시');

CREATE TABLE TBL_SCORE(
   SCORE_SNUMBER   VARCHAR2(1000)
  , STUDENT_NUMBER   NUMBER
  , MAJOR_MNUMBER   VARCHAR2(1000)
  , SCORE_GRADE      CHAR(1)   CONSTRAINT SCORE_GRADE_NN NOT NULL
                       CONSTRAINT SCORE_GRADE_CK CHECK(SCORE_GRADE = 'A'
                                             OR SCORE_GRADE = 'B'
                                             OR SCORE_GRADE = 'C'
                                             OR SCORE_GRADE = 'F')
  , CONSTRAINT STUDENT_NUMBER_FK FOREIGN KEY(STUDENT_NUMBER) REFERENCES TBL_STUDENT1
  , CONSTRAINT MAJOR_NUMBER_FK FOREIGN KEY(MAJOR_MNUMBER) REFERENCES TBL_MAJOR
  , CONSTRAINT SCORE_PK PRIMARY KEY(SCORE_SNUMBER, STUDENT_NUMBER, MAJOR_MNUMBER)
);

SELECT   *
FROM    tbl_score;

INSERT INTO tbl_score
VALUES(1, 1, 1, 'A');
VALUES(2, 2, 4, 'B');
VALUES(3, 3, 3, 'F');
VALUES(4, 4, 2, 'C');
VALUES(5, 5, 2, 'B');

DROP table tbl_student1;
DROP TABLE tbl_major;
DROP TABLE tbl_score;




--------------------------------------------------------------------------------------------------------
2. 동물병원의 요구사항은 다음과 같다
- 동물병원의 반려동물, 보호자의 정보를 저장하고 관리한다
- 보호자는 번호, 이름, 주소, 핸드폰 번호, 이메일주소를 가진다
- 반려동물은 번호, 이름, 성별, 나이, 종, 품종, 보호자 번호를 가진다
- 모든 보호자는 중복이 없는 번호를 가진다
- 보호자의 이름, 주소, 핸드폰 번호는 필수 정보이다
- 모든 동물은 중복이 없는 번호를 가진다
- 동물의 이름, 성별, 나이, 종, 보호자 번호는 필수 정보이다
- 동물의 보호자 번호는 실제 존재하는 보호자 번호여야 한다

1) 개념적 설계
	보호자		반려동물		종
	=====================================
	번호		번호		종
	이름		이름		품종
	주소		성별
	폰번호		나이
	이메일		품종
			보호자번호
			
2) 논리적 설계
	보호자
	====================
	번호(PK)		정수
	이름	N/N	문자열
	주소	N/N	문자열
	폰번호(UK)N/N	문자열
	이메일		문자열

	반려동물
	====================
	번호(PK)		정수
	이름	N/N	문자열
	성별(CK)	N/N	문자
	나이	N/N	정수
	품종(FK)	N/N	정수
	보호자번호(FK)N/N	정수

	종
	====================
	종	N/N	문자열
	품종(PK)	N/N	정수

3) 물리적 설계
	TBL_PERSON
	======================================
	PERSON_NUMBER(PK)	NUMBER
	PERSON_NAME(NN)		VARCHAR2(1000)
	PERSON_ADDRESS(NN)	VARCHAR2(1000)
	PERSON_PHONE(UK/NN)	VARCHAR2(1000)
	PERSON_EMAIL		VARCHAR2(1000)

	TBL_PET
	======================================
	PET_NUMBER(PK)		NUMBER
	PET_NAME(NN)		VARCHAR2(1000)
	PET_GENDER(CK/NN)	CHAR(1)
	TYPE_KIND(FK/NN)	NUMBER
	PERSON_NUMBER(FK/NN)	VARCHAR2(1000)

	TBL_TYPE
	======================================
	TYPE_TYPE(NN)		VARCHAR2(1000)
	TYPE_KIND(PK)		NUMBER


CREATE TABLE TBL_PERSON(
   PERSON_NUMBER   NUMBER
  , PERSON_NAME      VARCHAR2(1000) CONSTRAINT PERSON_NAME_NN NOT NULL
  , PERSON_ADDRESS   VARCHAR2(1000) CONSTRAINT PERSON_ADDRESS_NN NOT NULL
  , PERSON_PHONE   VARCHAR2(1000) CONSTRAINT PERSON_PHONE_NN NOT NULL
  , PERSON_EMAIL   VARCHAR2(1000)
  , CONSTRAINT PERSON_NUMBER_PK PRIMARY KEY(PERSON_NUMBER)
  , CONSTRAINT PERSON_PHONE_UL UNIQUE(PERSON_PHONE)
);

INSERT INTO tbl_person
--VALUES(1, '길진수', '시흥시', '010-1111-1111', null);
--VALUES(2, '진수길', '목성', '010-2222-2222', null);
--VALUES(3, '수길진', '코리아', '010-3333-3333', null);
--VALUES(4, '야호', '서울', '010-4444-4444', null);
VALUES(5, '치킨', '강원도', '010-5555-5555', null);

SELECT 	*
FROM	tbl_person;

CREATE TABLE TBL_PET(
    PET_NUMBER	NUMBER
  , PER_NAME	VARCHAR2(1000) CONSTRAINT PET_NAME_NN NOT NULL
  , PET_GENDER	CHAR(1)   CONSTRAINT PET_GENDER NOT NULL
                                     CHECK(PET_GENDER = 'M'
                                         OR PET_GENDER = 'W')
  , TYPE_KIND   NUMBER   CONSTRAINT TYPE_KIND_NN NOT NULL
  , PERSON_NUMBER NUMBER CONSTRAINT PERSON_NUMBER NOT NULL
  , CONSTRAINT PET_NUMBER_PK PRIMARY KEY(PET_NUMBER)
  , CONSTRAINT TYPE_KIND_FK FOREIGN KEY(TYPE_KIND) REFERENCES TBL_TYPE(TYPE_KIND)
  , CONSTRAINT PERSON_NUMBER_FK FOREIGN KEY(PERSON_NUMBER) REFERENCES TBL_PERSON(PERSON_NUMBER)
);

INSERT INTO tbl_pet
--VALUES(1, '아토', 'W', 1, 1);
--VALUES(2, '먼지', 'M', 1, 2);
--VALUES(3, '별이', 'W', 1, 3);
--VALUES(4, '진돌이', 'W', 2, 4);
VALUES(5, '똥강아지', 'M', 2, 5);

SELECT	*
FROM 	tbl_pet
ORDER BY pet_NUMBER;

DELETE FROM tbl_pet;
   
CREATE TABLE TBL_TYPE(
   TYPE_TYPE   VARCHAR2(1000)   CONSTRAINT TYPE_TYPE NOT NULL
  , TYPE_KIND   NUMBER
  , CONSTRAINT TYPE_KIND_PK PRIMARY KEY(TYPE_KIND)
);

INSERT INTO tbl_type
--VALUES('고양이', 1);
--VALUES('고양이', 2);
--VALUES('고양이', 3);
--VALUES('강아지', 4);
--VALUES('강아지', 5);

SELECT	*
FROM 	tbl_type;

DROP TABLE TBL_PERSON;
DROP TABLE TBL_PET;